// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WPFMarket.Models.Database;

#nullable disable

namespace WPFMarket.Models.Database.Migrations
{
    [DbContext(typeof(SupermarketContext))]
    [Migration("20240527030302_GetAdminById")]
    partial class GetAdminById
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.CategoryEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("LiquidationDiscount")
                        .HasColumnType("integer")
                        .HasColumnName("liquidation_discount");

                    b.HasKey("Name");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.LoyaltyCardEntity", b =>
                {
                    b.Property<string>("CardNumber")
                        .HasColumnType("text")
                        .HasColumnName("card_number");

                    b.Property<decimal>("Points")
                        .HasColumnType("numeric")
                        .HasColumnName("points");

                    b.HasKey("CardNumber");

                    b.ToTable("loyalty_cards");
                });

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.ProducerEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Active")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("active");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.HasKey("Name");

                    b.ToTable("producers");
                });

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.ProductEntity", b =>
                {
                    b.Property<string>("Barcode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<bool>("Discounted")
                        .HasColumnType("boolean")
                        .HasColumnName("discounted_price");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("ProducerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("producer_id");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unit_of_measurement");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Barcode");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProducerId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.ReceiptDiscountEntity", b =>
                {
                    b.Property<string>("DiscountCode")
                        .HasColumnType("text")
                        .HasColumnName("discount_code");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer")
                        .HasColumnName("discount_percent");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("ProductBarcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("ReceiptEntity")
                        .HasColumnType("integer");

                    b.Property<string>("ReceiptId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receipt_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("DiscountCode");

                    b.HasIndex("ProductBarcode");

                    b.HasIndex("ReceiptEntity");

                    b.ToTable("receipt_discount");
                });

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.ReceiptEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("card_number");

                    b.Property<string>("CashierId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cashier_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("final_price");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_price");

                    b.Property<int>("UserEntity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserEntity");

                    b.ToTable("receipts");
                });

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.ReceiptItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item_type");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("ProductId")
                        .HasColumnType("text")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("ReceiptId")
                        .HasColumnType("integer")
                        .HasColumnName("receipt_id");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_price");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("receipt_items");
                });

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.StockEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("acquisition_date");

                    b.Property<decimal>("AcquisitionPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("acquisition_price");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("BarcodeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<string>("ProductBarcode")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("ProductBarcode");

                    b.ToTable("stocks");
                });

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("TOTPSecretKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("totp_secret_key");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.ProductEntity", b =>
                {
                    b.HasOne("WPFMarket.Models.Database.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WPFMarket.Models.Database.Entities.ProducerEntity", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.ReceiptDiscountEntity", b =>
                {
                    b.HasOne("WPFMarket.Models.Database.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductBarcode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WPFMarket.Models.Database.Entities.ReceiptEntity", "Receipt")
                        .WithMany()
                        .HasForeignKey("ReceiptEntity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.ReceiptEntity", b =>
                {
                    b.HasOne("WPFMarket.Models.Database.Entities.UserEntity", "Cashier")
                        .WithMany()
                        .HasForeignKey("UserEntity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cashier");
                });

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.ReceiptItemEntity", b =>
                {
                    b.HasOne("WPFMarket.Models.Database.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("WPFMarket.Models.Database.Entities.ReceiptEntity", "Receipt")
                        .WithMany()
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("WPFMarket.Models.Database.Entities.StockEntity", b =>
                {
                    b.HasOne("WPFMarket.Models.Database.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductBarcode");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
